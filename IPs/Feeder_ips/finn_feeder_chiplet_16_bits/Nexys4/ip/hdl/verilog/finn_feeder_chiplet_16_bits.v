// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="finn_feeder_chiplet_16_bits_finn_feeder_chiplet_16_bits,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1862,HLS_SYN_LUT=2904,HLS_VERSION=2023_2}" *)

module finn_feeder_chiplet_16_bits (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 145'd1;
parameter    ap_ST_fsm_state2 = 145'd2;
parameter    ap_ST_fsm_state3 = 145'd4;
parameter    ap_ST_fsm_state4 = 145'd8;
parameter    ap_ST_fsm_state5 = 145'd16;
parameter    ap_ST_fsm_state6 = 145'd32;
parameter    ap_ST_fsm_state7 = 145'd64;
parameter    ap_ST_fsm_state8 = 145'd128;
parameter    ap_ST_fsm_state9 = 145'd256;
parameter    ap_ST_fsm_state10 = 145'd512;
parameter    ap_ST_fsm_state11 = 145'd1024;
parameter    ap_ST_fsm_state12 = 145'd2048;
parameter    ap_ST_fsm_state13 = 145'd4096;
parameter    ap_ST_fsm_state14 = 145'd8192;
parameter    ap_ST_fsm_state15 = 145'd16384;
parameter    ap_ST_fsm_state16 = 145'd32768;
parameter    ap_ST_fsm_state17 = 145'd65536;
parameter    ap_ST_fsm_state18 = 145'd131072;
parameter    ap_ST_fsm_state19 = 145'd262144;
parameter    ap_ST_fsm_state20 = 145'd524288;
parameter    ap_ST_fsm_state21 = 145'd1048576;
parameter    ap_ST_fsm_state22 = 145'd2097152;
parameter    ap_ST_fsm_state23 = 145'd4194304;
parameter    ap_ST_fsm_state24 = 145'd8388608;
parameter    ap_ST_fsm_state25 = 145'd16777216;
parameter    ap_ST_fsm_state26 = 145'd33554432;
parameter    ap_ST_fsm_state27 = 145'd67108864;
parameter    ap_ST_fsm_state28 = 145'd134217728;
parameter    ap_ST_fsm_state29 = 145'd268435456;
parameter    ap_ST_fsm_state30 = 145'd536870912;
parameter    ap_ST_fsm_state31 = 145'd1073741824;
parameter    ap_ST_fsm_state32 = 145'd2147483648;
parameter    ap_ST_fsm_state33 = 145'd4294967296;
parameter    ap_ST_fsm_state34 = 145'd8589934592;
parameter    ap_ST_fsm_state35 = 145'd17179869184;
parameter    ap_ST_fsm_state36 = 145'd34359738368;
parameter    ap_ST_fsm_state37 = 145'd68719476736;
parameter    ap_ST_fsm_state38 = 145'd137438953472;
parameter    ap_ST_fsm_state39 = 145'd274877906944;
parameter    ap_ST_fsm_state40 = 145'd549755813888;
parameter    ap_ST_fsm_state41 = 145'd1099511627776;
parameter    ap_ST_fsm_state42 = 145'd2199023255552;
parameter    ap_ST_fsm_state43 = 145'd4398046511104;
parameter    ap_ST_fsm_state44 = 145'd8796093022208;
parameter    ap_ST_fsm_state45 = 145'd17592186044416;
parameter    ap_ST_fsm_state46 = 145'd35184372088832;
parameter    ap_ST_fsm_state47 = 145'd70368744177664;
parameter    ap_ST_fsm_state48 = 145'd140737488355328;
parameter    ap_ST_fsm_state49 = 145'd281474976710656;
parameter    ap_ST_fsm_state50 = 145'd562949953421312;
parameter    ap_ST_fsm_state51 = 145'd1125899906842624;
parameter    ap_ST_fsm_state52 = 145'd2251799813685248;
parameter    ap_ST_fsm_state53 = 145'd4503599627370496;
parameter    ap_ST_fsm_state54 = 145'd9007199254740992;
parameter    ap_ST_fsm_state55 = 145'd18014398509481984;
parameter    ap_ST_fsm_state56 = 145'd36028797018963968;
parameter    ap_ST_fsm_state57 = 145'd72057594037927936;
parameter    ap_ST_fsm_state58 = 145'd144115188075855872;
parameter    ap_ST_fsm_state59 = 145'd288230376151711744;
parameter    ap_ST_fsm_state60 = 145'd576460752303423488;
parameter    ap_ST_fsm_state61 = 145'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 145'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 145'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 145'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 145'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 145'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 145'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 145'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 145'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 145'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 145'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 145'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 145'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 145'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 145'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 145'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 145'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 145'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 145'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 145'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 145'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 145'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 145'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 145'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 145'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 145'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 145'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 145'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 145'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 145'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 145'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 145'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 145'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 145'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 145'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 145'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 145'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 145'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 145'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 145'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 145'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 145'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 145'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 145'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 145'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 145'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 145'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 145'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 145'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 145'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 145'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 145'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 145'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 145'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 145'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 145'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 145'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 145'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 145'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 145'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 145'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 145'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 145'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 145'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 145'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 145'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 145'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 145'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 145'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 145'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 145'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 145'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 145'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 145'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 145'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 145'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 145'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 145'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 145'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 145'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 145'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 145'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 145'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 145'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 145'd22300745198530623141535718272648361505980416;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [15:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
input  [7:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [144:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] predicted_index;
wire   [63:0] ext_mem;
wire   [31:0] initial_address;
wire   [31:0] image_size;
wire   [31:0] num_images;
wire   [63:0] done_irq;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state4;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state144;
reg    in_stream_TDATA_blk_n;
reg    ap_block_state1;
reg   [63:0] ext_mem_read_reg_294;
wire   [31:0] div_cast_fu_215_p1;
reg   [31:0] div_cast_reg_299;
wire   [30:0] div1_fu_219_p4;
reg   [30:0] div1_reg_304;
wire   [31:0] div1_cast_fu_229_p1;
reg   [31:0] div1_cast_reg_309;
reg   [63:0] gmem_addr_reg_314;
wire   [31:0] mul_ln34_fu_201_p2;
reg   [31:0] mul_ln34_reg_324;
wire    ap_CS_fsm_state2;
wire   [31:0] address_fu_278_p2;
reg   [31:0] address_reg_329;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_start;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_done;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_idle;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_ready;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWVALID;
wire   [63:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWADDR;
wire   [0:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWID;
wire   [31:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWLEN;
wire   [2:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWSIZE;
wire   [1:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWBURST;
wire   [1:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWLOCK;
wire   [3:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWCACHE;
wire   [2:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWPROT;
wire   [3:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWQOS;
wire   [3:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWREGION;
wire   [0:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWUSER;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WVALID;
wire   [31:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WDATA;
wire   [3:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WSTRB;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WLAST;
wire   [0:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WID;
wire   [0:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WUSER;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARVALID;
wire   [63:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARADDR;
wire   [0:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARID;
wire   [31:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARLEN;
wire   [2:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARSIZE;
wire   [1:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARBURST;
wire   [1:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARLOCK;
wire   [3:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARCACHE;
wire   [2:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARPROT;
wire   [3:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARQOS;
wire   [3:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARREGION;
wire   [0:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARUSER;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_RREADY;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_BREADY;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_out_stream_TREADY;
wire   [15:0] grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_out_stream_TDATA;
wire    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_out_stream_TVALID;
reg    grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_start_reg;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
wire  signed [63:0] sext_ln31_fu_243_p1;
reg    ap_block_state144;
reg  signed [31:0] img_idx_fu_116;
wire   [31:0] img_idx_2_fu_267_p2;
wire   [0:0] icmp_ln27_fu_262_p2;
reg   [7:0] predicted_index_preg;
wire   [30:0] mul_ln34_fu_201_p1;
wire   [30:0] div_fu_205_p4;
wire   [61:0] trunc_ln_fu_233_p4;
wire  signed [31:0] icmp_ln27_fu_262_p0;
wire  signed [31:0] img_idx_2_fu_267_p0;
wire    ap_CS_fsm_state145;
wire    regslice_both_out_stream_V_data_V_U_apdone_blk;
reg   [144:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
reg    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
reg    ap_ST_fsm_state74_blk;
reg    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ST_fsm_state117_blk;
wire    ap_ST_fsm_state118_blk;
wire    ap_ST_fsm_state119_blk;
wire    ap_ST_fsm_state120_blk;
wire    ap_ST_fsm_state121_blk;
wire    ap_ST_fsm_state122_blk;
wire    ap_ST_fsm_state123_blk;
wire    ap_ST_fsm_state124_blk;
wire    ap_ST_fsm_state125_blk;
wire    ap_ST_fsm_state126_blk;
wire    ap_ST_fsm_state127_blk;
wire    ap_ST_fsm_state128_blk;
wire    ap_ST_fsm_state129_blk;
wire    ap_ST_fsm_state130_blk;
wire    ap_ST_fsm_state131_blk;
wire    ap_ST_fsm_state132_blk;
wire    ap_ST_fsm_state133_blk;
wire    ap_ST_fsm_state134_blk;
wire    ap_ST_fsm_state135_blk;
wire    ap_ST_fsm_state136_blk;
wire    ap_ST_fsm_state137_blk;
wire    ap_ST_fsm_state138_blk;
wire    ap_ST_fsm_state139_blk;
wire    ap_ST_fsm_state140_blk;
wire    ap_ST_fsm_state141_blk;
wire    ap_ST_fsm_state142_blk;
wire    ap_ST_fsm_state143_blk;
reg    ap_ST_fsm_state144_blk;
reg    ap_ST_fsm_state145_blk;
wire    out_stream_TREADY_int_regslice;
wire    regslice_both_out_stream_V_data_V_U_vld_out;
wire    regslice_both_in_stream_V_data_V_U_apdone_blk;
wire   [7:0] in_stream_TDATA_int_regslice;
wire    in_stream_TVALID_int_regslice;
reg    in_stream_TREADY_int_regslice;
wire    regslice_both_in_stream_V_data_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 145'd1;
#0 grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_start_reg = 1'b0;
#0 img_idx_fu_116 = 32'd0;
#0 predicted_index_preg = 8'd0;
end

finn_feeder_chiplet_16_bits_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2 grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_start),
    .ap_done(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_done),
    .ap_idle(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_idle),
    .ap_ready(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_ready),
    .m_axi_gmem_AWVALID(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(gmem_RVALID),
    .m_axi_gmem_RREADY(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(gmem_RDATA),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(gmem_RFIFONUM),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .out_stream_TREADY(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_out_stream_TREADY),
    .empty(div1_reg_304),
    .conv3_i_i_i42(address_reg_329),
    .ext_mem(ext_mem_read_reg_294),
    .out_stream_TDATA(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_out_stream_TDATA),
    .out_stream_TVALID(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_out_stream_TVALID)
);

finn_feeder_chiplet_16_bits_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .predicted_index(predicted_index),
    .ext_mem(ext_mem),
    .initial_address(initial_address),
    .image_size(image_size),
    .num_images(num_images),
    .done_irq(done_irq),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

finn_feeder_chiplet_16_bits_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 70 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARADDR),
    .I_ARLEN(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARLEN),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_reg_314),
    .I_AWLEN(32'd1),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WSTRB(4'd1),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

finn_feeder_chiplet_16_bits_mul_32s_31ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
mul_32s_31ns_32_1_1_U6(
    .din0(img_idx_fu_116),
    .din1(mul_ln34_fu_201_p1),
    .dout(mul_ln34_fu_201_p2)
);

finn_feeder_chiplet_16_bits_regslice_both #(
    .DataWidth( 16 ))
regslice_both_out_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_out_stream_TDATA),
    .vld_in(grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_out_stream_TVALID),
    .ack_in(out_stream_TREADY_int_regslice),
    .data_out(out_stream_TDATA),
    .vld_out(regslice_both_out_stream_V_data_V_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_V_data_V_U_apdone_blk)
);

finn_feeder_chiplet_16_bits_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TDATA),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_data_V_U_ack_in),
    .data_out(in_stream_TDATA_int_regslice),
    .vld_out(in_stream_TVALID_int_regslice),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_data_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state145))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state73)) begin
            grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_start_reg <= 1'b1;
        end else if ((grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_ready == 1'b1)) begin
            grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predicted_index_preg <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_state144) & (1'b1 == ap_CS_fsm_state144))) begin
            predicted_index_preg <= in_stream_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        img_idx_fu_116 <= 32'd0;
    end else if (((icmp_ln27_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        img_idx_fu_116 <= img_idx_2_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        address_reg_329 <= address_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        div1_cast_reg_309[30 : 0] <= div1_cast_fu_229_p1[30 : 0];
        div1_reg_304 <= {{image_size[31:1]}};
        div_cast_reg_299[30 : 0] <= div_cast_fu_215_p1[30 : 0];
        ext_mem_read_reg_294 <= ext_mem;
        gmem_addr_reg_314 <= sext_ln31_fu_243_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_ln34_reg_324 <= mul_ln34_fu_201_p2;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state117_blk = 1'b0;

assign ap_ST_fsm_state118_blk = 1'b0;

assign ap_ST_fsm_state119_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state120_blk = 1'b0;

assign ap_ST_fsm_state121_blk = 1'b0;

assign ap_ST_fsm_state122_blk = 1'b0;

assign ap_ST_fsm_state123_blk = 1'b0;

assign ap_ST_fsm_state124_blk = 1'b0;

assign ap_ST_fsm_state125_blk = 1'b0;

assign ap_ST_fsm_state126_blk = 1'b0;

assign ap_ST_fsm_state127_blk = 1'b0;

assign ap_ST_fsm_state128_blk = 1'b0;

assign ap_ST_fsm_state129_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state130_blk = 1'b0;

assign ap_ST_fsm_state131_blk = 1'b0;

assign ap_ST_fsm_state132_blk = 1'b0;

assign ap_ST_fsm_state133_blk = 1'b0;

assign ap_ST_fsm_state134_blk = 1'b0;

assign ap_ST_fsm_state135_blk = 1'b0;

assign ap_ST_fsm_state136_blk = 1'b0;

assign ap_ST_fsm_state137_blk = 1'b0;

assign ap_ST_fsm_state138_blk = 1'b0;

assign ap_ST_fsm_state139_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state140_blk = 1'b0;

assign ap_ST_fsm_state141_blk = 1'b0;

assign ap_ST_fsm_state142_blk = 1'b0;

assign ap_ST_fsm_state143_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state144)) begin
        ap_ST_fsm_state144_blk = 1'b1;
    end else begin
        ap_ST_fsm_state144_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state145_blk = 1'b1;
    end else begin
        ap_ST_fsm_state145_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state72_blk = 1'b1;
    end else begin
        ap_ST_fsm_state72_blk = 1'b0;
    end
end

assign ap_ST_fsm_state73_blk = 1'b0;

always @ (*) begin
    if ((grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_done == 1'b0)) begin
        ap_ST_fsm_state74_blk = 1'b1;
    end else begin
        ap_ST_fsm_state74_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state75_blk = 1'b1;
    end else begin
        ap_ST_fsm_state75_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state145))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state145))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        gmem_ARVALID = grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state144) & (1'b1 == ap_CS_fsm_state144)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        gmem_RREADY = grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_m_axi_gmem_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        gmem_WDATA = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_WDATA = 32'd0;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state76)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state72))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        in_stream_TDATA_blk_n = in_stream_TVALID_int_regslice;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state144) & (1'b1 == ap_CS_fsm_state144))) begin
        in_stream_TREADY_int_regslice = 1'b1;
    end else begin
        in_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state144) & (1'b1 == ap_CS_fsm_state144))) begin
        predicted_index = in_stream_TDATA_int_regslice;
    end else begin
        predicted_index = predicted_index_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln27_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            if (((1'b0 == ap_block_state144) & (1'b1 == ap_CS_fsm_state144))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end
        end
        ap_ST_fsm_state145 : begin
            if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state145))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign address_fu_278_p2 = (mul_ln34_reg_324 + div_cast_reg_299);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state144 = ((gmem_BVALID == 1'b0) | (in_stream_TVALID_int_regslice == 1'b0));
end

assign div1_cast_fu_229_p1 = div1_fu_219_p4;

assign div1_fu_219_p4 = {{image_size[31:1]}};

assign div_cast_fu_215_p1 = div_fu_205_p4;

assign div_fu_205_p4 = {{initial_address[31:1]}};

assign grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_start = grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_ap_start_reg;

assign grp_finn_feeder_chiplet_16_bits_Pipeline_VITIS_LOOP_36_2_fu_190_out_stream_TREADY = (out_stream_TREADY_int_regslice & ap_CS_fsm_state74);

assign icmp_ln27_fu_262_p0 = img_idx_fu_116;

assign icmp_ln27_fu_262_p2 = ((icmp_ln27_fu_262_p0 == num_images) ? 1'b1 : 1'b0);

assign img_idx_2_fu_267_p0 = img_idx_fu_116;

assign img_idx_2_fu_267_p2 = ($signed(img_idx_2_fu_267_p0) + $signed(32'd1));

assign in_stream_TREADY = regslice_both_in_stream_V_data_V_U_ack_in;

assign mul_ln34_fu_201_p1 = div1_cast_reg_309;

assign out_stream_TVALID = regslice_both_out_stream_V_data_V_U_vld_out;

assign sext_ln31_fu_243_p1 = $signed(trunc_ln_fu_233_p4);

assign trunc_ln_fu_233_p4 = {{done_irq[63:2]}};

always @ (posedge ap_clk) begin
    div_cast_reg_299[31] <= 1'b0;
    div1_cast_reg_309[31] <= 1'b0;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "finn_feeder_chiplet_16_bits_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //finn_feeder_chiplet_16_bits

