-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity finn_feeder_chiplet is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of finn_feeder_chiplet is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "finn_feeder_chiplet_finn_feeder_chiplet,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.082000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=282,HLS_SYN_LUT=543,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal predicted_index_ap_vld : STD_LOGIC;
    signal ext_mem : STD_LOGIC_VECTOR (7 downto 0);
    signal initial_address : STD_LOGIC_VECTOR (31 downto 0);
    signal image_size : STD_LOGIC_VECTOR (31 downto 0);
    signal num_images : STD_LOGIC_VECTOR (31 downto 0);
    signal g_current_image : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal image_size_read_reg_143 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_start : STD_LOGIC;
    signal grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_done : STD_LOGIC;
    signal grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_idle : STD_LOGIC;
    signal grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_ready : STD_LOGIC;
    signal grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_OUTPUT_STREAM_TREADY : STD_LOGIC;
    signal grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln44_fu_129_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal add_ln42_fu_111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln44_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal OUTPUT_STREAM_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_STREAM_TVALID_int_regslice : STD_LOGIC;
    signal INPUT_STREAM_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_data_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component finn_feeder_chiplet_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        image_size : IN STD_LOGIC_VECTOR (31 downto 0);
        ext_mem : IN STD_LOGIC_VECTOR (7 downto 0);
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC );
    end component;


    component finn_feeder_chiplet_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        predicted_index : IN STD_LOGIC_VECTOR (7 downto 0);
        predicted_index_ap_vld : IN STD_LOGIC;
        ext_mem : OUT STD_LOGIC_VECTOR (7 downto 0);
        initial_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_images : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component finn_feeder_chiplet_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98 : component finn_feeder_chiplet_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_start,
        ap_done => grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_done,
        ap_idle => grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_idle,
        ap_ready => grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_ready,
        OUTPUT_STREAM_TREADY => grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_OUTPUT_STREAM_TREADY,
        image_size => image_size_read_reg_143,
        ext_mem => ext_mem,
        OUTPUT_STREAM_TDATA => grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_OUTPUT_STREAM_TVALID);

    control_s_axi_U : component finn_feeder_chiplet_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        predicted_index => INPUT_STREAM_TDATA_int_regslice,
        predicted_index_ap_vld => predicted_index_ap_vld,
        ext_mem => ext_mem,
        initial_address => initial_address,
        image_size => image_size,
        num_images => num_images,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_OUTPUT_STREAM_V_data_V_U : component finn_feeder_chiplet_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_OUTPUT_STREAM_TDATA,
        vld_in => grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_OUTPUT_STREAM_TVALID,
        ack_in => OUTPUT_STREAM_TREADY_int_regslice,
        data_out => OUTPUT_STREAM_TDATA,
        vld_out => regslice_both_OUTPUT_STREAM_V_data_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_V_data_V_U : component finn_feeder_chiplet_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TDATA,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_V_data_V_U_ack_in,
        data_out => INPUT_STREAM_TDATA_int_regslice,
        vld_out => INPUT_STREAM_TVALID_int_regslice,
        ack_out => INPUT_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_STREAM_V_data_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_ready = ap_const_logic_1)) then 
                    grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                g_current_image <= select_ln44_fu_129_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                image_size_read_reg_143 <= image_size;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_done, ap_CS_fsm_state3, ap_block_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    INPUT_STREAM_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, INPUT_STREAM_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            INPUT_STREAM_TDATA_blk_n <= INPUT_STREAM_TVALID_int_regslice;
        else 
            INPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_STREAM_TREADY <= regslice_both_INPUT_STREAM_V_data_V_U_ack_in;

    INPUT_STREAM_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state4, ap_block_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then 
            INPUT_STREAM_TREADY_int_regslice <= ap_const_logic_1;
        else 
            INPUT_STREAM_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_TVALID <= regslice_both_OUTPUT_STREAM_V_data_V_U_vld_out;
    add_ln42_fu_111_p2 <= std_logic_vector(unsigned(g_current_image) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_done)
    begin
        if ((grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4)
    begin
        if ((ap_const_boolean_1 = ap_block_state4)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state4_assign_proc : process(regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk, INPUT_STREAM_TVALID_int_regslice)
    begin
                ap_block_state4 <= ((ap_const_logic_0 = INPUT_STREAM_TVALID_int_regslice) or (regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, ap_block_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, ap_block_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_OUTPUT_STREAM_TREADY <= (ap_CS_fsm_state3 and OUTPUT_STREAM_TREADY_int_regslice);
    grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_start <= grp_finn_feeder_chiplet_Pipeline_VITIS_LOOP_33_1_fu_98_ap_start_reg;
    icmp_ln44_fu_117_p2 <= "1" when (unsigned(add_ln42_fu_111_p2) < unsigned(num_images)) else "0";

    predicted_index_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_block_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then 
            predicted_index_ap_vld <= ap_const_logic_1;
        else 
            predicted_index_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln44_fu_129_p3 <= 
        ap_const_lv32_0 when (xor_ln44_fu_123_p2(0) = '1') else 
        add_ln42_fu_111_p2;
    xor_ln44_fu_123_p2 <= (icmp_ln44_fu_117_p2 xor ap_const_lv1_1);
end behav;
